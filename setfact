#!/c/Users/swenninger/AppData/Local/Programs/Python/Python36-32/python.exe

# Created by Samuel Wenninger
# Last modified 5/15/2017

# Used to convert the JSON settings file to a Python data structure representation
import json
# Used to run shell commands in a subshell
import subprocess
# Various operating system related functionality such as changing directories or getting file paths
import os
# Used to flush the output buffer
import sys
# Used to get the name of the platform (i.e. Windows or Linux)
import platform
# Used to get the name of the process running this Python script (i.e. cmd.exe)
import psutil
# Used for Windows SSH and SCP
import paramiko
from scp import SCPClient

# Desc: Read the settings file and turn it into a Python dictionary
# Input: N/A
# Output: The python representation of the JSON settings object or False if the settings
#         object is malformed.
def readFile():
    try:
        settingsLoc = str(os.path.dirname(os.path.abspath(__file__)))
        if PLATFORM == 'Windows':
            settingsLoc += '\settings.json'
        else:
            settingsLoc += '/settings.json'
        with open(settingsLoc, 'r') as f:
            return json.load(f)
    except:
        return False

# Desc: Print the strings in the menu list in a framed box
# Input: "menu" - a list of strings to print
#        "largestLine" - the length of the largest line
#        "title" - a string to display at the top of task list menus
# Output: N/A
def printBoxMenu(menu, largestLine, title=''):
    if title != '':
        print('-' * (largestLine + 4))
        paddingSize = int(largestLine - len(title))
        if paddingSize % 2 == 0:
            print('| ' + (' ' * (paddingSize//2)) +  title + (' ' * (paddingSize//2)) +' |')
        else:
            print('| ' + (' ' * (paddingSize//2 + 1)) +  title + (' ' * (paddingSize//2)) +' |')
    print('-' * (largestLine + 4))
    for line in menu:
        print('| ' + line + (' ' * (largestLine - len(line))) +' |')
    print('-' * (largestLine + 4))

def clearScreen():
    ppid = os.getppid()
    if psutil.Process(ppid).name() == 'cmd.exe':
        os.system('cls')
    else:
        os.system('clear')

# Desc: Prompt the user to select a mode and a task
# Input: "settings" - a dict version of the settings JSON file
# Output: The index of the task to run in the tasks array
#         "False" - if invalid user input
def getUserInput(settings):
    location = {}
    menu = []
    largestLine = len("Back")
    # Prompt the user to select the mode
    for index, item in enumerate(settings['modes']):
        line = str(index + 1) + ') ' + str(item['name'])
        if len(line) > largestLine:
            largestLine = len(line)
        menu.append(line)

    printBoxMenu(menu, largestLine)
    mode = input('Choice: ')
    clearScreen()
    if not mode.isnumeric():
        return -1
    mode = int(mode)
    # Ensure the user's choice is within bounds
    if mode > len(settings['modes']) or mode < 1: return -1
    location['modeIndex'] = mode - 1
    menu = []
    taskCount = 0
    # Prompt the user to select the task
    for task in settings['modes'][mode-1]['tasks']:
        taskCount += 1
        line = str(taskCount) + ') ' + str(task['name'])
        if len(line) > largestLine:
            largestLine = len(line)
        menu.append(line)
    menu.append('!) Back')
    printBoxMenu(menu, largestLine, settings['modes'][mode-1]['name'])
    mode = input('Choice: ')
    clearScreen()
    if mode == '!':
        return -2
    if not mode.isnumeric():
        return -1
    mode = int(mode)
    # Ensure the user's choice is within bounds
    if mode > taskCount or mode < 1: return -1
    location['taskIndex'] = mode - 1
    # Index is one less than the user inputted selection
    return location

# Desc: Handle the PROMPT#<prompt-key> special command in the commandList
# Input: "settings" - a dict version of the settings JSON file
#        "commandList" - a list of strings representing commands to execute
#        "promptResponses" - a dict used to store previous responses made to prompts so that multiple of the same prompt
#                            are not shown to the user
# Output: A list of commands with the {{<prompt-key}} replaced
def handlePrompts(settings, commandList, promptResponses):
    stringCommandList = ''.join(commandList)
    if 'PROMPT' not in stringCommandList:
        return commandList
    dirName = False
    promptNum = '1'
    newCommandList = []
    for command in commandList:
        if 'PROMPT' in command:
            promptNum = str(command.split('#')[-1])
            # Check for a previous response to the same prompt and use it if it is available.
            if str(promptNum) in promptResponses.keys():
                dirName = promptResponses[str(promptNum)]
            else:
                dirName = input(settings['prompts'][promptNum]['text'])
            promptResponses[str(promptNum)] = dirName
            continue
        if dirName is not False and ('{{' + promptNum + '}}') in command:
            command = command.replace('{{' + promptNum + '}}', dirName)
        newCommandList.append(command)
    return newCommandList

# Desc: Run a given task in the correct context given the tasks index
# Input: "settings" - a dict version of the settings JSON file
#        "location" - a dict containing the "modeIndex" and "taskIndex"
# Output: N/A
def runTask(settings, location):
    commandList = []
    prevProjectId = False
    # Keep track of previous responses for commands that use the same prompt so that the user
    # is not prompted multiple times for the same information
    promptResponses = {}
    for commandId in settings['modes'][location['modeIndex']]['tasks'][location['taskIndex']]['commandSequence']:
        # Get the command object
        command = settings['commands'][str(commandId)]
        # Get the projectId associated with the command if there is one
        commandProjectId = int(command['projectId']) if 'projectId' in command else False
        # If the next command is in a different project than the previous command, switch directories
        # to the location of said project before executing the requested command
        if (prevProjectId is False or commandProjectId != prevProjectId) and commandProjectId:
            prevProjectId = commandProjectId
            os.chdir(str(settings['projects'][str(commandProjectId)]['path'][PLATFORM]))
        if 'name' in command:
            printBoxMenu([command['name']], len(command['name']))
        # The subprocess causes the output to be buffered so a manual flush is required here.
        sys.stdout.flush()
        updatedCommand = handlePrompts(settings, command['commandList'][PLATFORM], promptResponses)
        stringCommandList = ''.join(updatedCommand)
        if 'WINSSH' not in stringCommandList and 'WINSCP' not in stringCommandList:
            for item in updatedCommand:
                subprocess.run(item, shell=True)
        else:
            arg = False
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            if 'WINSSH' in stringCommandList:
                for item in updatedCommand:
                    if arg is True:
                        arg = False
                        server = str(item.split('"')[0].strip())
                        command = str(item.split('"')[1].strip())
                        ssh.connect(server)
                        stdin, stdout, stderr = ssh.exec_command(command)
                        for line in stdout.readlines():
                            print(line)

                    if item == 'WINSSH':
                        arg = True
                        continue
            elif 'WINSCP' in stringCommandList:
                skips = 0
                for index, item in enumerate(updatedCommand):
                    if skips:
                        skips -= 1
                        continue
                    if item == 'WINSCP':
                        fileName = updatedCommand[index + 1]
                        server = updatedCommand[index + 2]
                        dest = updatedCommand[index + 3]
                        ssh.connect(server)
                        scp = SCPClient(ssh.get_transport())
                        scp.put(fileName, dest)
                        skips = 3
                        continue

    return

# Desc: Determine if the user is running the script on Windows or Linux
# Input: N/A
# Output: The platform (Windows or Linux) as a string
def determinePlatform():
    ppid = os.getppid()
    if psutil.Process(ppid).name() == 'cmd.exe' or platform.system() == 'Windows':
        return 'Windows'
    else:
        return platform.system()

# Desc: Main control flow of the program
# Input: N/A
# Output: N/A
def main():
    clearScreen()
    settings = readFile()
    if settings is False:
        print('Error: Malformed JSON settings file')
        return

    while 1:
        location = getUserInput(settings)
        if location == -1:
            print('Error: Invalid option selected')
            return
        elif location == -2:
            continue
        else:
            break

    runTask(settings, location)
    return

if __name__ == '__main__':
    PLATFORM = determinePlatform()
    main()
